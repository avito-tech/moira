// Code generated by MockGen. DO NOT EDIT.
// Source: go.avito.ru/DO/moira (interfaces: Database)

// Package mock_moira_alert is a generated GoMock package.
package mock_moira_alert

import (
	gomock "github.com/golang/mock/gomock"
	moira "go.avito.ru/DO/moira"
	tomb "gopkg.in/tomb.v2"
	reflect "reflect"
	time "time"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AckEscalations mocks base method
func (m *MockDatabase) AckEscalations(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckEscalations", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckEscalations indicates an expected call of AckEscalations
func (mr *MockDatabaseMockRecorder) AckEscalations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckEscalations", reflect.TypeOf((*MockDatabase)(nil).AckEscalations), arg0, arg1, arg2)
}

// AckEscalationsBatch mocks base method
func (m *MockDatabase) AckEscalationsBatch(arg0 string, arg1 []string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckEscalationsBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckEscalationsBatch indicates an expected call of AckEscalationsBatch
func (mr *MockDatabaseMockRecorder) AckEscalationsBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckEscalationsBatch", reflect.TypeOf((*MockDatabase)(nil).AckEscalationsBatch), arg0, arg1, arg2)
}

// AckUnacknowledgedMessages mocks base method
func (m *MockDatabase) AckUnacknowledgedMessages(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckUnacknowledgedMessages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckUnacknowledgedMessages indicates an expected call of AckUnacknowledgedMessages
func (mr *MockDatabaseMockRecorder) AckUnacknowledgedMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckUnacknowledgedMessages", reflect.TypeOf((*MockDatabase)(nil).AckUnacknowledgedMessages), arg0, arg1)
}

// AcquireLock mocks base method
func (m *MockDatabase) AcquireLock(arg0 string, arg1 int, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireLock", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcquireLock indicates an expected call of AcquireLock
func (mr *MockDatabaseMockRecorder) AcquireLock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLock", reflect.TypeOf((*MockDatabase)(nil).AcquireLock), arg0, arg1, arg2)
}

// AcquireTriggerCheckLock mocks base method
func (m *MockDatabase) AcquireTriggerCheckLock(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireTriggerCheckLock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcquireTriggerCheckLock indicates an expected call of AcquireTriggerCheckLock
func (mr *MockDatabaseMockRecorder) AcquireTriggerCheckLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireTriggerCheckLock", reflect.TypeOf((*MockDatabase)(nil).AcquireTriggerCheckLock), arg0)
}

// AcquireTriggerMaintenanceLock mocks base method
func (m *MockDatabase) AcquireTriggerMaintenanceLock(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireTriggerMaintenanceLock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcquireTriggerMaintenanceLock indicates an expected call of AcquireTriggerMaintenanceLock
func (mr *MockDatabaseMockRecorder) AcquireTriggerMaintenanceLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireTriggerMaintenanceLock", reflect.TypeOf((*MockDatabase)(nil).AcquireTriggerMaintenanceLock), arg0)
}

// AddChildEvents mocks base method
func (m *MockDatabase) AddChildEvents(arg0, arg1, arg2 string, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChildEvents", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddChildEvents indicates an expected call of AddChildEvents
func (mr *MockDatabaseMockRecorder) AddChildEvents(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChildEvents", reflect.TypeOf((*MockDatabase)(nil).AddChildEvents), arg0, arg1, arg2, arg3)
}

// AddDelayedNotificationEvent mocks base method
func (m *MockDatabase) AddDelayedNotificationEvent(arg0 moira.NotificationEvent, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDelayedNotificationEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDelayedNotificationEvent indicates an expected call of AddDelayedNotificationEvent
func (mr *MockDatabaseMockRecorder) AddDelayedNotificationEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDelayedNotificationEvent", reflect.TypeOf((*MockDatabase)(nil).AddDelayedNotificationEvent), arg0, arg1)
}

// AddEscalations mocks base method
func (m *MockDatabase) AddEscalations(arg0 int64, arg1 moira.NotificationEvent, arg2 moira.TriggerData, arg3 []moira.EscalationData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEscalations", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEscalations indicates an expected call of AddEscalations
func (mr *MockDatabaseMockRecorder) AddEscalations(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEscalations", reflect.TypeOf((*MockDatabase)(nil).AddEscalations), arg0, arg1, arg2, arg3)
}

// AddNotification mocks base method
func (m *MockDatabase) AddNotification(arg0 *moira.ScheduledNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotification", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNotification indicates an expected call of AddNotification
func (mr *MockDatabaseMockRecorder) AddNotification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotification", reflect.TypeOf((*MockDatabase)(nil).AddNotification), arg0)
}

// AddNotifications mocks base method
func (m *MockDatabase) AddNotifications(arg0 []*moira.ScheduledNotification, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotifications", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNotifications indicates an expected call of AddNotifications
func (mr *MockDatabaseMockRecorder) AddNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotifications", reflect.TypeOf((*MockDatabase)(nil).AddNotifications), arg0, arg1)
}

// AddPatternMetric mocks base method
func (m *MockDatabase) AddPatternMetric(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPatternMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPatternMetric indicates an expected call of AddPatternMetric
func (mr *MockDatabaseMockRecorder) AddPatternMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPatternMetric", reflect.TypeOf((*MockDatabase)(nil).AddPatternMetric), arg0, arg1)
}

// AddSlackThreadLinks mocks base method
func (m *MockDatabase) AddSlackThreadLinks(arg0, arg1, arg2, arg3 string, arg4 *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSlackThreadLinks", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSlackThreadLinks indicates an expected call of AddSlackThreadLinks
func (mr *MockDatabaseMockRecorder) AddSlackThreadLinks(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlackThreadLinks", reflect.TypeOf((*MockDatabase)(nil).AddSlackThreadLinks), arg0, arg1, arg2, arg3, arg4)
}

// AddTriggerForcedNotification mocks base method
func (m *MockDatabase) AddTriggerForcedNotification(arg0 string, arg1 []string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTriggerForcedNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTriggerForcedNotification indicates an expected call of AddTriggerForcedNotification
func (mr *MockDatabaseMockRecorder) AddTriggerForcedNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTriggerForcedNotification", reflect.TypeOf((*MockDatabase)(nil).AddTriggerForcedNotification), arg0, arg1, arg2)
}

// AddUnacknowledgedMessage mocks base method
func (m *MockDatabase) AddUnacknowledgedMessage(arg0, arg1 string, arg2 moira.MessageLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUnacknowledgedMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUnacknowledgedMessage indicates an expected call of AddUnacknowledgedMessage
func (mr *MockDatabaseMockRecorder) AddUnacknowledgedMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUnacknowledgedMessage", reflect.TypeOf((*MockDatabase)(nil).AddUnacknowledgedMessage), arg0, arg1, arg2)
}

// CheckTriggerExists mocks base method
func (m *MockDatabase) CheckTriggerExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTriggerExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTriggerExists indicates an expected call of CheckTriggerExists
func (mr *MockDatabaseMockRecorder) CheckTriggerExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTriggerExists", reflect.TypeOf((*MockDatabase)(nil).CheckTriggerExists), arg0)
}

// DeleteChildEvents mocks base method
func (m *MockDatabase) DeleteChildEvents(arg0, arg1, arg2 string, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChildEvents", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChildEvents indicates an expected call of DeleteChildEvents
func (mr *MockDatabaseMockRecorder) DeleteChildEvents(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChildEvents", reflect.TypeOf((*MockDatabase)(nil).DeleteChildEvents), arg0, arg1, arg2, arg3)
}

// DeleteInheritedTriggerDashboard mocks base method
func (m *MockDatabase) DeleteInheritedTriggerDashboard(arg0, arg1, arg2, arg3, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInheritedTriggerDashboard", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInheritedTriggerDashboard indicates an expected call of DeleteInheritedTriggerDashboard
func (mr *MockDatabaseMockRecorder) DeleteInheritedTriggerDashboard(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInheritedTriggerDashboard", reflect.TypeOf((*MockDatabase)(nil).DeleteInheritedTriggerDashboard), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteLock mocks base method
func (m *MockDatabase) DeleteLock(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLock indicates an expected call of DeleteLock
func (mr *MockDatabaseMockRecorder) DeleteLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLock", reflect.TypeOf((*MockDatabase)(nil).DeleteLock), arg0)
}

// DeleteTriggerCheckLock mocks base method
func (m *MockDatabase) DeleteTriggerCheckLock(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTriggerCheckLock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTriggerCheckLock indicates an expected call of DeleteTriggerCheckLock
func (mr *MockDatabaseMockRecorder) DeleteTriggerCheckLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerCheckLock", reflect.TypeOf((*MockDatabase)(nil).DeleteTriggerCheckLock), arg0)
}

// DeleteTriggerForcedNotification mocks base method
func (m *MockDatabase) DeleteTriggerForcedNotification(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTriggerForcedNotification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTriggerForcedNotification indicates an expected call of DeleteTriggerForcedNotification
func (mr *MockDatabaseMockRecorder) DeleteTriggerForcedNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerForcedNotification", reflect.TypeOf((*MockDatabase)(nil).DeleteTriggerForcedNotification), arg0, arg1)
}

// DeleteTriggerForcedNotifications mocks base method
func (m *MockDatabase) DeleteTriggerForcedNotifications(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTriggerForcedNotifications", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTriggerForcedNotifications indicates an expected call of DeleteTriggerForcedNotifications
func (mr *MockDatabaseMockRecorder) DeleteTriggerForcedNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerForcedNotifications", reflect.TypeOf((*MockDatabase)(nil).DeleteTriggerForcedNotifications), arg0, arg1)
}

// DeleteTriggerMaintenanceLock mocks base method
func (m *MockDatabase) DeleteTriggerMaintenanceLock(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTriggerMaintenanceLock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTriggerMaintenanceLock indicates an expected call of DeleteTriggerMaintenanceLock
func (mr *MockDatabaseMockRecorder) DeleteTriggerMaintenanceLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerMaintenanceLock", reflect.TypeOf((*MockDatabase)(nil).DeleteTriggerMaintenanceLock), arg0)
}

// DeleteTriggerThrottling mocks base method
func (m *MockDatabase) DeleteTriggerThrottling(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTriggerThrottling", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTriggerThrottling indicates an expected call of DeleteTriggerThrottling
func (mr *MockDatabaseMockRecorder) DeleteTriggerThrottling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerThrottling", reflect.TypeOf((*MockDatabase)(nil).DeleteTriggerThrottling), arg0)
}

// DelMaintenanceTrigger mocks base method
func (m *MockDatabase) DelMaintenanceTrigger(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelMaintenanceTrigger", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelMaintenanceTrigger indicates an expected call of DelMaintenanceTrigger
func (mr *MockDatabaseMockRecorder) DelMaintenanceTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelMaintenanceTrigger", reflect.TypeOf((*MockDatabase)(nil).DelMaintenanceTrigger), arg0)
}

// DeregisterBot mocks base method
func (m *MockDatabase) DeregisterBot(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterBot", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeregisterBot indicates an expected call of DeregisterBot
func (mr *MockDatabaseMockRecorder) DeregisterBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterBot", reflect.TypeOf((*MockDatabase)(nil).DeregisterBot), arg0)
}

// DeregisterBots mocks base method
func (m *MockDatabase) DeregisterBots() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeregisterBots")
}

// DeregisterBots indicates an expected call of DeregisterBots
func (mr *MockDatabaseMockRecorder) DeregisterBots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterBots", reflect.TypeOf((*MockDatabase)(nil).DeregisterBots))
}

// FetchDelayedNotificationEvents mocks base method
func (m *MockDatabase) FetchDelayedNotificationEvents(arg0 int64, arg1 bool) ([]moira.NotificationEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDelayedNotificationEvents", arg0, arg1)
	ret0, _ := ret[0].([]moira.NotificationEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDelayedNotificationEvents indicates an expected call of FetchDelayedNotificationEvents
func (mr *MockDatabaseMockRecorder) FetchDelayedNotificationEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDelayedNotificationEvents", reflect.TypeOf((*MockDatabase)(nil).FetchDelayedNotificationEvents), arg0, arg1)
}

// FetchNotificationEvent mocks base method
func (m *MockDatabase) FetchNotificationEvent(arg0 bool) (moira.NotificationEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNotificationEvent", arg0)
	ret0, _ := ret[0].(moira.NotificationEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNotificationEvent indicates an expected call of FetchNotificationEvent
func (mr *MockDatabaseMockRecorder) FetchNotificationEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNotificationEvent", reflect.TypeOf((*MockDatabase)(nil).FetchNotificationEvent), arg0)
}

// FetchNotifications mocks base method
func (m *MockDatabase) FetchNotifications(arg0 int64) ([]*moira.ScheduledNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNotifications", arg0)
	ret0, _ := ret[0].([]*moira.ScheduledNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNotifications indicates an expected call of FetchNotifications
func (mr *MockDatabaseMockRecorder) FetchNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNotifications", reflect.TypeOf((*MockDatabase)(nil).FetchNotifications), arg0)
}

// FetchScheduledEscalationEvents mocks base method
func (m *MockDatabase) FetchScheduledEscalationEvents(arg0 int64) ([]*moira.ScheduledEscalationEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchScheduledEscalationEvents", arg0)
	ret0, _ := ret[0].([]*moira.ScheduledEscalationEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchScheduledEscalationEvents indicates an expected call of FetchScheduledEscalationEvents
func (mr *MockDatabaseMockRecorder) FetchScheduledEscalationEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchScheduledEscalationEvents", reflect.TypeOf((*MockDatabase)(nil).FetchScheduledEscalationEvents), arg0)
}

// FetchSlackDelayedActions mocks base method
func (m *MockDatabase) FetchSlackDelayedActions(arg0 time.Time) ([]moira.SlackDelayedAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSlackDelayedActions", arg0)
	ret0, _ := ret[0].([]moira.SlackDelayedAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSlackDelayedActions indicates an expected call of FetchSlackDelayedActions
func (mr *MockDatabaseMockRecorder) FetchSlackDelayedActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSlackDelayedActions", reflect.TypeOf((*MockDatabase)(nil).FetchSlackDelayedActions), arg0)
}

// GetAllContacts mocks base method
func (m *MockDatabase) GetAllContacts() ([]*moira.ContactData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllContacts")
	ret0, _ := ret[0].([]*moira.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllContacts indicates an expected call of GetAllContacts
func (mr *MockDatabaseMockRecorder) GetAllContacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContacts", reflect.TypeOf((*MockDatabase)(nil).GetAllContacts))
}

// GetAllInheritedTriggerDashboards mocks base method
func (m *MockDatabase) GetAllInheritedTriggerDashboards(arg0, arg1, arg2 string) ([]moira.SlackThreadLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInheritedTriggerDashboards", arg0, arg1, arg2)
	ret0, _ := ret[0].([]moira.SlackThreadLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInheritedTriggerDashboards indicates an expected call of GetAllInheritedTriggerDashboards
func (mr *MockDatabaseMockRecorder) GetAllInheritedTriggerDashboards(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInheritedTriggerDashboards", reflect.TypeOf((*MockDatabase)(nil).GetAllInheritedTriggerDashboards), arg0, arg1, arg2)
}

// GetAllNotificationEvents mocks base method
func (m *MockDatabase) GetAllNotificationEvents(arg0, arg1 int64) ([]*moira.NotificationEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotificationEvents", arg0, arg1)
	ret0, _ := ret[0].([]*moira.NotificationEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotificationEvents indicates an expected call of GetAllNotificationEvents
func (mr *MockDatabaseMockRecorder) GetAllNotificationEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotificationEvents", reflect.TypeOf((*MockDatabase)(nil).GetAllNotificationEvents), arg0, arg1)
}

// GetAllSlackThreadLinks mocks base method
func (m *MockDatabase) GetAllSlackThreadLinks(arg0 string) ([]moira.SlackThreadLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSlackThreadLinks", arg0)
	ret0, _ := ret[0].([]moira.SlackThreadLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSlackThreadLinks indicates an expected call of GetAllSlackThreadLinks
func (mr *MockDatabaseMockRecorder) GetAllSlackThreadLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSlackThreadLinks", reflect.TypeOf((*MockDatabase)(nil).GetAllSlackThreadLinks), arg0)
}

// GetAllSubscriptions mocks base method
func (m *MockDatabase) GetAllSubscriptions() ([]*moira.SubscriptionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubscriptions")
	ret0, _ := ret[0].([]*moira.SubscriptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubscriptions indicates an expected call of GetAllSubscriptions
func (mr *MockDatabaseMockRecorder) GetAllSubscriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubscriptions", reflect.TypeOf((*MockDatabase)(nil).GetAllSubscriptions))
}

// GetChecksUpdatesCount mocks base method
func (m *MockDatabase) GetChecksUpdatesCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChecksUpdatesCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChecksUpdatesCount indicates an expected call of GetChecksUpdatesCount
func (mr *MockDatabaseMockRecorder) GetChecksUpdatesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChecksUpdatesCount", reflect.TypeOf((*MockDatabase)(nil).GetChecksUpdatesCount))
}

// GetChildEvents mocks base method
func (m *MockDatabase) GetChildEvents(arg0, arg1 string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildEvents", arg0, arg1)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildEvents indicates an expected call of GetChildEvents
func (mr *MockDatabaseMockRecorder) GetChildEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildEvents", reflect.TypeOf((*MockDatabase)(nil).GetChildEvents), arg0, arg1)
}

// GetContact mocks base method
func (m *MockDatabase) GetContact(arg0 string) (moira.ContactData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", arg0)
	ret0, _ := ret[0].(moira.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact
func (mr *MockDatabaseMockRecorder) GetContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockDatabase)(nil).GetContact), arg0)
}

// GetContacts mocks base method
func (m *MockDatabase) GetContacts(arg0 []string) ([]*moira.ContactData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", arg0)
	ret0, _ := ret[0].([]*moira.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts
func (mr *MockDatabaseMockRecorder) GetContacts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockDatabase)(nil).GetContacts), arg0)
}

// GetGlobalSettings mocks base method
func (m *MockDatabase) GetGlobalSettings() (moira.GlobalSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalSettings")
	ret0, _ := ret[0].(moira.GlobalSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalSettings indicates an expected call of GetGlobalSettings
func (mr *MockDatabaseMockRecorder) GetGlobalSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalSettings", reflect.TypeOf((*MockDatabase)(nil).GetGlobalSettings))
}

// GetIDByUsername mocks base method
func (m *MockDatabase) GetIDByUsername(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByUsername", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByUsername indicates an expected call of GetIDByUsername
func (mr *MockDatabaseMockRecorder) GetIDByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByUsername", reflect.TypeOf((*MockDatabase)(nil).GetIDByUsername), arg0, arg1)
}

// GetMaintenanceSilent mocks base method
func (m *MockDatabase) GetMaintenanceSilent(arg0 moira.SilentPatternType) (moira.Maintenance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaintenanceSilent", arg0)
	ret0, _ := ret[0].(moira.Maintenance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaintenanceSilent indicates an expected call of GetMaintenanceSilent
func (mr *MockDatabaseMockRecorder) GetMaintenanceSilent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceSilent", reflect.TypeOf((*MockDatabase)(nil).GetMaintenanceSilent), arg0)
}

// GetMaintenanceTrigger mocks base method
func (m *MockDatabase) GetMaintenanceTrigger(arg0 string) (moira.Maintenance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaintenanceTrigger", arg0)
	ret0, _ := ret[0].(moira.Maintenance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaintenanceTrigger indicates an expected call of GetMaintenanceTrigger
func (mr *MockDatabaseMockRecorder) GetMaintenanceTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceTrigger", reflect.TypeOf((*MockDatabase)(nil).GetMaintenanceTrigger), arg0)
}

// GetMetricRetention mocks base method
func (m *MockDatabase) GetMetricRetention(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricRetention", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricRetention indicates an expected call of GetMetricRetention
func (mr *MockDatabaseMockRecorder) GetMetricRetention(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricRetention", reflect.TypeOf((*MockDatabase)(nil).GetMetricRetention), arg0)
}

// GetMetricsUpdatesCount mocks base method
func (m *MockDatabase) GetMetricsUpdatesCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsUpdatesCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsUpdatesCount indicates an expected call of GetMetricsUpdatesCount
func (mr *MockDatabaseMockRecorder) GetMetricsUpdatesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsUpdatesCount", reflect.TypeOf((*MockDatabase)(nil).GetMetricsUpdatesCount))
}

// GetMetricsValues mocks base method
func (m *MockDatabase) GetMetricsValues(arg0 []string, arg1, arg2 int64) (map[string][]*moira.MetricValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsValues", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string][]*moira.MetricValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsValues indicates an expected call of GetMetricsValues
func (mr *MockDatabaseMockRecorder) GetMetricsValues(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsValues", reflect.TypeOf((*MockDatabase)(nil).GetMetricsValues), arg0, arg1, arg2)
}

// GetNotificationEventCount mocks base method
func (m *MockDatabase) GetNotificationEventCount(arg0 string, arg1 int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationEventCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetNotificationEventCount indicates an expected call of GetNotificationEventCount
func (mr *MockDatabaseMockRecorder) GetNotificationEventCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationEventCount", reflect.TypeOf((*MockDatabase)(nil).GetNotificationEventCount), arg0, arg1)
}

// GetNotificationEvents mocks base method
func (m *MockDatabase) GetNotificationEvents(arg0 string, arg1, arg2 int64) ([]*moira.NotificationEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*moira.NotificationEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationEvents indicates an expected call of GetNotificationEvents
func (mr *MockDatabaseMockRecorder) GetNotificationEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationEvents", reflect.TypeOf((*MockDatabase)(nil).GetNotificationEvents), arg0, arg1, arg2)
}

// GetNotifications mocks base method
func (m *MockDatabase) GetNotifications(arg0, arg1 int64) ([]*moira.ScheduledNotification, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", arg0, arg1)
	ret0, _ := ret[0].([]*moira.ScheduledNotification)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNotifications indicates an expected call of GetNotifications
func (mr *MockDatabaseMockRecorder) GetNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockDatabase)(nil).GetNotifications), arg0, arg1)
}

// GetOrCreateMaintenanceSilent mocks base method
func (m *MockDatabase) GetOrCreateMaintenanceSilent(arg0 moira.SilentPatternType) (moira.Maintenance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateMaintenanceSilent", arg0)
	ret0, _ := ret[0].(moira.Maintenance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateMaintenanceSilent indicates an expected call of GetOrCreateMaintenanceSilent
func (mr *MockDatabaseMockRecorder) GetOrCreateMaintenanceSilent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateMaintenanceSilent", reflect.TypeOf((*MockDatabase)(nil).GetOrCreateMaintenanceSilent), arg0)
}

// GetOrCreateMaintenanceTrigger mocks base method
func (m *MockDatabase) GetOrCreateMaintenanceTrigger(arg0 string) (moira.Maintenance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateMaintenanceTrigger", arg0)
	ret0, _ := ret[0].(moira.Maintenance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateMaintenanceTrigger indicates an expected call of GetOrCreateMaintenanceTrigger
func (mr *MockDatabaseMockRecorder) GetOrCreateMaintenanceTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateMaintenanceTrigger", reflect.TypeOf((*MockDatabase)(nil).GetOrCreateMaintenanceTrigger), arg0)
}

// GetOrCreateTriggerLastCheck mocks base method
func (m *MockDatabase) GetOrCreateTriggerLastCheck(arg0 string) (*moira.CheckData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateTriggerLastCheck", arg0)
	ret0, _ := ret[0].(*moira.CheckData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateTriggerLastCheck indicates an expected call of GetOrCreateTriggerLastCheck
func (mr *MockDatabaseMockRecorder) GetOrCreateTriggerLastCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateTriggerLastCheck", reflect.TypeOf((*MockDatabase)(nil).GetOrCreateTriggerLastCheck), arg0)
}

// GetParentEvents mocks base method
func (m *MockDatabase) GetParentEvents(arg0, arg1 string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentEvents", arg0, arg1)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentEvents indicates an expected call of GetParentEvents
func (mr *MockDatabaseMockRecorder) GetParentEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentEvents", reflect.TypeOf((*MockDatabase)(nil).GetParentEvents), arg0, arg1)
}

// GetPatternMetrics mocks base method
func (m *MockDatabase) GetPatternMetrics(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatternMetrics", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatternMetrics indicates an expected call of GetPatternMetrics
func (mr *MockDatabaseMockRecorder) GetPatternMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatternMetrics", reflect.TypeOf((*MockDatabase)(nil).GetPatternMetrics), arg0)
}

// GetPatternTriggerIDs mocks base method
func (m *MockDatabase) GetPatternTriggerIDs(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatternTriggerIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatternTriggerIDs indicates an expected call of GetPatternTriggerIDs
func (mr *MockDatabaseMockRecorder) GetPatternTriggerIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatternTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).GetPatternTriggerIDs), arg0)
}

// GetPatterns mocks base method
func (m *MockDatabase) GetPatterns() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatterns")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatterns indicates an expected call of GetPatterns
func (mr *MockDatabaseMockRecorder) GetPatterns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatterns", reflect.TypeOf((*MockDatabase)(nil).GetPatterns))
}

// GetServiceDuty mocks base method
func (m *MockDatabase) GetServiceDuty(arg0 string) (moira.DutyData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceDuty", arg0)
	ret0, _ := ret[0].(moira.DutyData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceDuty indicates an expected call of GetServiceDuty
func (mr *MockDatabaseMockRecorder) GetServiceDuty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceDuty", reflect.TypeOf((*MockDatabase)(nil).GetServiceDuty), arg0)
}

// GetSilentPatternsAll mocks base method
func (m *MockDatabase) GetSilentPatternsAll() ([]*moira.SilentPatternData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSilentPatternsAll")
	ret0, _ := ret[0].([]*moira.SilentPatternData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSilentPatternsAll indicates an expected call of GetSilentPatternsAll
func (mr *MockDatabaseMockRecorder) GetSilentPatternsAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSilentPatternsAll", reflect.TypeOf((*MockDatabase)(nil).GetSilentPatternsAll))
}

// GetSilentPatternsTyped mocks base method
func (m *MockDatabase) GetSilentPatternsTyped(arg0 moira.SilentPatternType) ([]*moira.SilentPatternData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSilentPatternsTyped", arg0)
	ret0, _ := ret[0].([]*moira.SilentPatternData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSilentPatternsTyped indicates an expected call of GetSilentPatternsTyped
func (mr *MockDatabaseMockRecorder) GetSilentPatternsTyped(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSilentPatternsTyped", reflect.TypeOf((*MockDatabase)(nil).GetSilentPatternsTyped), arg0)
}

// GetSlackDashboard mocks base method
func (m *MockDatabase) GetSlackDashboard(arg0, arg1 string) (moira.SlackDashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlackDashboard", arg0, arg1)
	ret0, _ := ret[0].(moira.SlackDashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlackDashboard indicates an expected call of GetSlackDashboard
func (mr *MockDatabaseMockRecorder) GetSlackDashboard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlackDashboard", reflect.TypeOf((*MockDatabase)(nil).GetSlackDashboard), arg0, arg1)
}

// GetSlackThreadLinks mocks base method
func (m *MockDatabase) GetSlackThreadLinks(arg0, arg1 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlackThreadLinks", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlackThreadLinks indicates an expected call of GetSlackThreadLinks
func (mr *MockDatabaseMockRecorder) GetSlackThreadLinks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlackThreadLinks", reflect.TypeOf((*MockDatabase)(nil).GetSlackThreadLinks), arg0, arg1)
}

// GetSlackUserGroups mocks base method
func (m *MockDatabase) GetSlackUserGroups() (moira.SlackUserGroupsCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlackUserGroups")
	ret0, _ := ret[0].(moira.SlackUserGroupsCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlackUserGroups indicates an expected call of GetSlackUserGroups
func (mr *MockDatabaseMockRecorder) GetSlackUserGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlackUserGroups", reflect.TypeOf((*MockDatabase)(nil).GetSlackUserGroups))
}

// GetSubscription mocks base method
func (m *MockDatabase) GetSubscription(arg0 string) (moira.SubscriptionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", arg0)
	ret0, _ := ret[0].(moira.SubscriptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription
func (mr *MockDatabaseMockRecorder) GetSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockDatabase)(nil).GetSubscription), arg0)
}

// GetSubscriptions mocks base method
func (m *MockDatabase) GetSubscriptions(arg0 []string) ([]*moira.SubscriptionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptions", arg0)
	ret0, _ := ret[0].([]*moira.SubscriptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions
func (mr *MockDatabaseMockRecorder) GetSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockDatabase)(nil).GetSubscriptions), arg0)
}

// GetTagNames mocks base method
func (m *MockDatabase) GetTagNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagNames indicates an expected call of GetTagNames
func (mr *MockDatabaseMockRecorder) GetTagNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagNames", reflect.TypeOf((*MockDatabase)(nil).GetTagNames))
}

// GetTagTriggerIDs mocks base method
func (m *MockDatabase) GetTagTriggerIDs(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagTriggerIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagTriggerIDs indicates an expected call of GetTagTriggerIDs
func (mr *MockDatabaseMockRecorder) GetTagTriggerIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).GetTagTriggerIDs), arg0)
}

// GetTagsStats mocks base method
func (m *MockDatabase) GetTagsStats(arg0 ...string) ([]moira.TagStats, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTagsStats", varargs...)
	ret0, _ := ret[0].([]moira.TagStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsStats indicates an expected call of GetTagsStats
func (mr *MockDatabaseMockRecorder) GetTagsStats(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsStats", reflect.TypeOf((*MockDatabase)(nil).GetTagsStats), arg0...)
}

// GetTagsSubscriptions mocks base method
func (m *MockDatabase) GetTagsSubscriptions(arg0 []string) ([]*moira.SubscriptionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsSubscriptions", arg0)
	ret0, _ := ret[0].([]*moira.SubscriptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsSubscriptions indicates an expected call of GetTagsSubscriptions
func (mr *MockDatabaseMockRecorder) GetTagsSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsSubscriptions", reflect.TypeOf((*MockDatabase)(nil).GetTagsSubscriptions), arg0)
}

// GetTrigger mocks base method
func (m *MockDatabase) GetTrigger(arg0 string) (*moira.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrigger", arg0)
	ret0, _ := ret[0].(*moira.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrigger indicates an expected call of GetTrigger
func (mr *MockDatabaseMockRecorder) GetTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrigger", reflect.TypeOf((*MockDatabase)(nil).GetTrigger), arg0)
}

// GetTriggerCheckIDs mocks base method
func (m *MockDatabase) GetTriggerCheckIDs(arg0 []string, arg1 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerCheckIDs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerCheckIDs indicates an expected call of GetTriggerCheckIDs
func (mr *MockDatabaseMockRecorder) GetTriggerCheckIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerCheckIDs", reflect.TypeOf((*MockDatabase)(nil).GetTriggerCheckIDs), arg0, arg1)
}

// GetTriggerChecks mocks base method
func (m *MockDatabase) GetTriggerChecks(arg0 []string) ([]*moira.TriggerCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerChecks", arg0)
	ret0, _ := ret[0].([]*moira.TriggerCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerChecks indicates an expected call of GetTriggerChecks
func (mr *MockDatabaseMockRecorder) GetTriggerChecks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerChecks", reflect.TypeOf((*MockDatabase)(nil).GetTriggerChecks), arg0)
}

// GetTriggerForcedNotifications mocks base method
func (m *MockDatabase) GetTriggerForcedNotifications(arg0 string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerForcedNotifications", arg0)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerForcedNotifications indicates an expected call of GetTriggerForcedNotifications
func (mr *MockDatabaseMockRecorder) GetTriggerForcedNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerForcedNotifications", reflect.TypeOf((*MockDatabase)(nil).GetTriggerForcedNotifications), arg0)
}

// GetTriggerIDs mocks base method
func (m *MockDatabase) GetTriggerIDs(arg0 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerIDs indicates an expected call of GetTriggerIDs
func (mr *MockDatabaseMockRecorder) GetTriggerIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).GetTriggerIDs), arg0)
}

// GetTriggerLastCheck mocks base method
func (m *MockDatabase) GetTriggerLastCheck(arg0 string) (*moira.CheckData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerLastCheck", arg0)
	ret0, _ := ret[0].(*moira.CheckData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerLastCheck indicates an expected call of GetTriggerLastCheck
func (mr *MockDatabaseMockRecorder) GetTriggerLastCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerLastCheck", reflect.TypeOf((*MockDatabase)(nil).GetTriggerLastCheck), arg0)
}

// GetTriggerLastChecks mocks base method
func (m *MockDatabase) GetTriggerLastChecks(arg0 []string) (map[string]*moira.CheckData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerLastChecks", arg0)
	ret0, _ := ret[0].(map[string]*moira.CheckData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerLastChecks indicates an expected call of GetTriggerLastChecks
func (mr *MockDatabaseMockRecorder) GetTriggerLastChecks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerLastChecks", reflect.TypeOf((*MockDatabase)(nil).GetTriggerLastChecks), arg0)
}

// GetTriggerThrottling mocks base method
func (m *MockDatabase) GetTriggerThrottling(arg0 string) (time.Time, time.Time) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerThrottling", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// GetTriggerThrottling indicates an expected call of GetTriggerThrottling
func (mr *MockDatabaseMockRecorder) GetTriggerThrottling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerThrottling", reflect.TypeOf((*MockDatabase)(nil).GetTriggerThrottling), arg0)
}

// GetTriggers mocks base method
func (m *MockDatabase) GetTriggers(arg0 []string) ([]*moira.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggers", arg0)
	ret0, _ := ret[0].([]*moira.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggers indicates an expected call of GetTriggers
func (mr *MockDatabaseMockRecorder) GetTriggers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggers", reflect.TypeOf((*MockDatabase)(nil).GetTriggers), arg0)
}

// GetUnacknowledgedMessages mocks base method
func (m *MockDatabase) GetUnacknowledgedMessages(arg0, arg1 string) ([]moira.MessageLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnacknowledgedMessages", arg0, arg1)
	ret0, _ := ret[0].([]moira.MessageLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnacknowledgedMessages indicates an expected call of GetUnacknowledgedMessages
func (mr *MockDatabaseMockRecorder) GetUnacknowledgedMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnacknowledgedMessages", reflect.TypeOf((*MockDatabase)(nil).GetUnacknowledgedMessages), arg0, arg1)
}

// GetUserContactIDs mocks base method
func (m *MockDatabase) GetUserContactIDs(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserContactIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserContactIDs indicates an expected call of GetUserContactIDs
func (mr *MockDatabaseMockRecorder) GetUserContactIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserContactIDs", reflect.TypeOf((*MockDatabase)(nil).GetUserContactIDs), arg0)
}

// GetUserSubscriptionIDs mocks base method
func (m *MockDatabase) GetUserSubscriptionIDs(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSubscriptionIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSubscriptionIDs indicates an expected call of GetUserSubscriptionIDs
func (mr *MockDatabaseMockRecorder) GetUserSubscriptionIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubscriptionIDs", reflect.TypeOf((*MockDatabase)(nil).GetUserSubscriptionIDs), arg0)
}

// LockSilentPatterns mocks base method
func (m *MockDatabase) LockSilentPatterns(arg0 moira.SilentPatternType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockSilentPatterns", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockSilentPatterns indicates an expected call of LockSilentPatterns
func (mr *MockDatabaseMockRecorder) LockSilentPatterns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockSilentPatterns", reflect.TypeOf((*MockDatabase)(nil).LockSilentPatterns), arg0)
}

// MaybeUpdateEscalationsOfSubscription mocks base method
func (m *MockDatabase) MaybeUpdateEscalationsOfSubscription(arg0 *moira.SubscriptionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaybeUpdateEscalationsOfSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MaybeUpdateEscalationsOfSubscription indicates an expected call of MaybeUpdateEscalationsOfSubscription
func (mr *MockDatabaseMockRecorder) MaybeUpdateEscalationsOfSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaybeUpdateEscalationsOfSubscription", reflect.TypeOf((*MockDatabase)(nil).MaybeUpdateEscalationsOfSubscription), arg0)
}

// MetricHasPendingEscalations mocks base method
func (m *MockDatabase) MetricHasPendingEscalations(arg0, arg1 string, arg2 bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricHasPendingEscalations", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricHasPendingEscalations indicates an expected call of MetricHasPendingEscalations
func (mr *MockDatabaseMockRecorder) MetricHasPendingEscalations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricHasPendingEscalations", reflect.TypeOf((*MockDatabase)(nil).MetricHasPendingEscalations), arg0, arg1, arg2)
}

// PushNotificationEvent mocks base method
func (m *MockDatabase) PushNotificationEvent(arg0 *moira.NotificationEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushNotificationEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushNotificationEvent indicates an expected call of PushNotificationEvent
func (mr *MockDatabaseMockRecorder) PushNotificationEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushNotificationEvent", reflect.TypeOf((*MockDatabase)(nil).PushNotificationEvent), arg0)
}

// RegisterBotIfAlreadyNot mocks base method
func (m *MockDatabase) RegisterBotIfAlreadyNot(arg0 string, arg1 time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBotIfAlreadyNot", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RegisterBotIfAlreadyNot indicates an expected call of RegisterBotIfAlreadyNot
func (mr *MockDatabaseMockRecorder) RegisterBotIfAlreadyNot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBotIfAlreadyNot", reflect.TypeOf((*MockDatabase)(nil).RegisterBotIfAlreadyNot), arg0, arg1)
}

// RegisterProcessedEscalationID mocks base method
func (m *MockDatabase) RegisterProcessedEscalationID(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterProcessedEscalationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterProcessedEscalationID indicates an expected call of RegisterProcessedEscalationID
func (mr *MockDatabaseMockRecorder) RegisterProcessedEscalationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProcessedEscalationID", reflect.TypeOf((*MockDatabase)(nil).RegisterProcessedEscalationID), arg0, arg1, arg2)
}

// RemoveContact mocks base method
func (m *MockDatabase) RemoveContact(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContact", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContact indicates an expected call of RemoveContact
func (mr *MockDatabaseMockRecorder) RemoveContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContact", reflect.TypeOf((*MockDatabase)(nil).RemoveContact), arg0)
}

// RemoveMetricValues mocks base method
func (m *MockDatabase) RemoveMetricValues(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMetricValues", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMetricValues indicates an expected call of RemoveMetricValues
func (mr *MockDatabaseMockRecorder) RemoveMetricValues(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMetricValues", reflect.TypeOf((*MockDatabase)(nil).RemoveMetricValues), arg0, arg1)
}

// RemoveMetricsValues mocks base method
func (m *MockDatabase) RemoveMetricsValues(arg0 []string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMetricsValues", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMetricsValues indicates an expected call of RemoveMetricsValues
func (mr *MockDatabaseMockRecorder) RemoveMetricsValues(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMetricsValues", reflect.TypeOf((*MockDatabase)(nil).RemoveMetricsValues), arg0, arg1)
}

// RemoveNotification mocks base method
func (m *MockDatabase) RemoveNotification(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNotification", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNotification indicates an expected call of RemoveNotification
func (mr *MockDatabaseMockRecorder) RemoveNotification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotification", reflect.TypeOf((*MockDatabase)(nil).RemoveNotification), arg0)
}

// RemovePattern mocks base method
func (m *MockDatabase) RemovePattern(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePattern", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePattern indicates an expected call of RemovePattern
func (mr *MockDatabaseMockRecorder) RemovePattern(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePattern", reflect.TypeOf((*MockDatabase)(nil).RemovePattern), arg0)
}

// RemovePatternTriggerIDs mocks base method
func (m *MockDatabase) RemovePatternTriggerIDs(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePatternTriggerIDs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePatternTriggerIDs indicates an expected call of RemovePatternTriggerIDs
func (mr *MockDatabaseMockRecorder) RemovePatternTriggerIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePatternTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).RemovePatternTriggerIDs), arg0)
}

// RemovePatternWithMetrics mocks base method
func (m *MockDatabase) RemovePatternWithMetrics(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePatternWithMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePatternWithMetrics indicates an expected call of RemovePatternWithMetrics
func (mr *MockDatabaseMockRecorder) RemovePatternWithMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePatternWithMetrics", reflect.TypeOf((*MockDatabase)(nil).RemovePatternWithMetrics), arg0)
}

// RemovePatternsMetrics mocks base method
func (m *MockDatabase) RemovePatternsMetrics(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePatternsMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePatternsMetrics indicates an expected call of RemovePatternsMetrics
func (mr *MockDatabaseMockRecorder) RemovePatternsMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePatternsMetrics", reflect.TypeOf((*MockDatabase)(nil).RemovePatternsMetrics), arg0)
}

// RemoveSilentPatterns mocks base method
func (m *MockDatabase) RemoveSilentPatterns(arg0 moira.SilentPatternType, arg1 ...*moira.SilentPatternData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSilentPatterns", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSilentPatterns indicates an expected call of RemoveSilentPatterns
func (mr *MockDatabaseMockRecorder) RemoveSilentPatterns(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSilentPatterns", reflect.TypeOf((*MockDatabase)(nil).RemoveSilentPatterns), arg0, arg1)
}

// RemoveSlackDashboards mocks base method
func (m *MockDatabase) RemoveSlackDashboards(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSlackDashboards", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSlackDashboards indicates an expected call of RemoveSlackDashboards
func (mr *MockDatabaseMockRecorder) RemoveSlackDashboards(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSlackDashboards", reflect.TypeOf((*MockDatabase)(nil).RemoveSlackDashboards), arg0, arg1)
}

// RemoveSlackThreadLinks mocks base method
func (m *MockDatabase) RemoveSlackThreadLinks(arg0, arg1 string, arg2, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSlackThreadLinks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSlackThreadLinks indicates an expected call of RemoveSlackThreadLinks
func (mr *MockDatabaseMockRecorder) RemoveSlackThreadLinks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSlackThreadLinks", reflect.TypeOf((*MockDatabase)(nil).RemoveSlackThreadLinks), arg0, arg1, arg2, arg3)
}

// RemoveSubscription mocks base method
func (m *MockDatabase) RemoveSubscription(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSubscription indicates an expected call of RemoveSubscription
func (mr *MockDatabaseMockRecorder) RemoveSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubscription", reflect.TypeOf((*MockDatabase)(nil).RemoveSubscription), arg0)
}

// RemoveTag mocks base method
func (m *MockDatabase) RemoveTag(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTag indicates an expected call of RemoveTag
func (mr *MockDatabaseMockRecorder) RemoveTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTag", reflect.TypeOf((*MockDatabase)(nil).RemoveTag), arg0)
}

// RemoveTrigger mocks base method
func (m *MockDatabase) RemoveTrigger(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrigger", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrigger indicates an expected call of RemoveTrigger
func (mr *MockDatabaseMockRecorder) RemoveTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrigger", reflect.TypeOf((*MockDatabase)(nil).RemoveTrigger), arg0)
}

// RemoveTriggerLastCheck mocks base method
func (m *MockDatabase) RemoveTriggerLastCheck(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTriggerLastCheck", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTriggerLastCheck indicates an expected call of RemoveTriggerLastCheck
func (mr *MockDatabaseMockRecorder) RemoveTriggerLastCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTriggerLastCheck", reflect.TypeOf((*MockDatabase)(nil).RemoveTriggerLastCheck), arg0)
}

// RemoveUser mocks base method
func (m *MockDatabase) RemoveUser(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser
func (mr *MockDatabaseMockRecorder) RemoveUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockDatabase)(nil).RemoveUser), arg0, arg1)
}

// RenewBotRegistration mocks base method
func (m *MockDatabase) RenewBotRegistration(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewBotRegistration", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RenewBotRegistration indicates an expected call of RenewBotRegistration
func (mr *MockDatabaseMockRecorder) RenewBotRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewBotRegistration", reflect.TypeOf((*MockDatabase)(nil).RenewBotRegistration), arg0)
}

// SaveContact mocks base method
func (m *MockDatabase) SaveContact(arg0 *moira.ContactData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContact", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContact indicates an expected call of SaveContact
func (mr *MockDatabaseMockRecorder) SaveContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContact", reflect.TypeOf((*MockDatabase)(nil).SaveContact), arg0)
}

// SaveInheritedTriggerDashboard mocks base method
func (m *MockDatabase) SaveInheritedTriggerDashboard(arg0, arg1, arg2, arg3, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveInheritedTriggerDashboard", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveInheritedTriggerDashboard indicates an expected call of SaveInheritedTriggerDashboard
func (mr *MockDatabaseMockRecorder) SaveInheritedTriggerDashboard(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveInheritedTriggerDashboard", reflect.TypeOf((*MockDatabase)(nil).SaveInheritedTriggerDashboard), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SaveMetrics mocks base method
func (m *MockDatabase) SaveMetrics(arg0 map[string]*moira.MatchedMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMetrics indicates an expected call of SaveMetrics
func (mr *MockDatabaseMockRecorder) SaveMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetrics", reflect.TypeOf((*MockDatabase)(nil).SaveMetrics), arg0)
}

// SaveSilentPatterns mocks base method
func (m *MockDatabase) SaveSilentPatterns(arg0 moira.SilentPatternType, arg1 ...*moira.SilentPatternData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSilentPatterns", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSilentPatterns indicates an expected call of SaveSilentPatterns
func (mr *MockDatabaseMockRecorder) SaveSilentPatterns(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSilentPatterns", reflect.TypeOf((*MockDatabase)(nil).SaveSilentPatterns), arg0, arg1)
}

// SaveSlackDelayedAction mocks base method
func (m *MockDatabase) SaveSlackDelayedAction(arg0 moira.SlackDelayedAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSlackDelayedAction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSlackDelayedAction indicates an expected call of SaveSlackDelayedAction
func (mr *MockDatabaseMockRecorder) SaveSlackDelayedAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSlackDelayedAction", reflect.TypeOf((*MockDatabase)(nil).SaveSlackDelayedAction), arg0)
}

// SaveSlackUserGroups mocks base method
func (m *MockDatabase) SaveSlackUserGroups(arg0 moira.SlackUserGroupsCache) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSlackUserGroups", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSlackUserGroups indicates an expected call of SaveSlackUserGroups
func (mr *MockDatabaseMockRecorder) SaveSlackUserGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSlackUserGroups", reflect.TypeOf((*MockDatabase)(nil).SaveSlackUserGroups), arg0)
}

// SaveSubscription mocks base method
func (m *MockDatabase) SaveSubscription(arg0 *moira.SubscriptionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSubscription indicates an expected call of SaveSubscription
func (mr *MockDatabaseMockRecorder) SaveSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSubscription", reflect.TypeOf((*MockDatabase)(nil).SaveSubscription), arg0)
}

// SaveSubscriptions mocks base method
func (m *MockDatabase) SaveSubscriptions(arg0 []*moira.SubscriptionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSubscriptions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSubscriptions indicates an expected call of SaveSubscriptions
func (mr *MockDatabaseMockRecorder) SaveSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSubscriptions", reflect.TypeOf((*MockDatabase)(nil).SaveSubscriptions), arg0)
}

// SaveTrigger mocks base method
func (m *MockDatabase) SaveTrigger(arg0 string, arg1 *moira.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTrigger", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTrigger indicates an expected call of SaveTrigger
func (mr *MockDatabaseMockRecorder) SaveTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTrigger", reflect.TypeOf((*MockDatabase)(nil).SaveTrigger), arg0, arg1)
}

// SetGlobalSettings mocks base method
func (m *MockDatabase) SetGlobalSettings(arg0 moira.GlobalSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGlobalSettings", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGlobalSettings indicates an expected call of SetGlobalSettings
func (mr *MockDatabaseMockRecorder) SetGlobalSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobalSettings", reflect.TypeOf((*MockDatabase)(nil).SetGlobalSettings), arg0)
}

// SetLock mocks base method
func (m *MockDatabase) SetLock(arg0 string, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLock", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLock indicates an expected call of SetLock
func (mr *MockDatabaseMockRecorder) SetLock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLock", reflect.TypeOf((*MockDatabase)(nil).SetLock), arg0, arg1)
}

// SetMaintenanceTrigger mocks base method
func (m *MockDatabase) SetMaintenanceTrigger(arg0 string, arg1 moira.Maintenance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaintenanceTrigger", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaintenanceTrigger indicates an expected call of SetMaintenanceTrigger
func (mr *MockDatabaseMockRecorder) SetMaintenanceTrigger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaintenanceTrigger", reflect.TypeOf((*MockDatabase)(nil).SetMaintenanceTrigger), arg0, arg1)
}

// SetTriggerCheckLock mocks base method
func (m *MockDatabase) SetTriggerCheckLock(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTriggerCheckLock", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTriggerCheckLock indicates an expected call of SetTriggerCheckLock
func (mr *MockDatabaseMockRecorder) SetTriggerCheckLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTriggerCheckLock", reflect.TypeOf((*MockDatabase)(nil).SetTriggerCheckLock), arg0)
}

// SetTriggerCoolDown mocks base method
func (m *MockDatabase) SetTriggerCoolDown(arg0 string, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTriggerCoolDown", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTriggerCoolDown indicates an expected call of SetTriggerCoolDown
func (mr *MockDatabaseMockRecorder) SetTriggerCoolDown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTriggerCoolDown", reflect.TypeOf((*MockDatabase)(nil).SetTriggerCoolDown), arg0, arg1)
}

// SetTriggerLastCheck mocks base method
func (m *MockDatabase) SetTriggerLastCheck(arg0 string, arg1 *moira.CheckData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTriggerLastCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTriggerLastCheck indicates an expected call of SetTriggerLastCheck
func (mr *MockDatabaseMockRecorder) SetTriggerLastCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTriggerLastCheck", reflect.TypeOf((*MockDatabase)(nil).SetTriggerLastCheck), arg0, arg1)
}

// SetTriggerThrottling mocks base method
func (m *MockDatabase) SetTriggerThrottling(arg0 string, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTriggerThrottling", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTriggerThrottling indicates an expected call of SetTriggerThrottling
func (mr *MockDatabaseMockRecorder) SetTriggerThrottling(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTriggerThrottling", reflect.TypeOf((*MockDatabase)(nil).SetTriggerThrottling), arg0, arg1)
}

// SetUsernameID mocks base method
func (m *MockDatabase) SetUsernameID(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUsernameID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUsernameID indicates an expected call of SetUsernameID
func (mr *MockDatabaseMockRecorder) SetUsernameID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUsernameID", reflect.TypeOf((*MockDatabase)(nil).SetUsernameID), arg0, arg1, arg2)
}

// SubscribeMetricEvents mocks base method
func (m *MockDatabase) SubscribeMetricEvents(arg0 *tomb.Tomb) (<-chan *moira.MetricEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeMetricEvents", arg0)
	ret0, _ := ret[0].(<-chan *moira.MetricEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeMetricEvents indicates an expected call of SubscribeMetricEvents
func (mr *MockDatabaseMockRecorder) SubscribeMetricEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeMetricEvents", reflect.TypeOf((*MockDatabase)(nil).SubscribeMetricEvents), arg0)
}

// TriggerHasPendingEscalations mocks base method
func (m *MockDatabase) TriggerHasPendingEscalations(arg0 string, arg1 bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerHasPendingEscalations", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerHasPendingEscalations indicates an expected call of TriggerHasPendingEscalations
func (mr *MockDatabaseMockRecorder) TriggerHasPendingEscalations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerHasPendingEscalations", reflect.TypeOf((*MockDatabase)(nil).TriggerHasPendingEscalations), arg0, arg1)
}

// UnlockSilentPatterns mocks base method
func (m *MockDatabase) UnlockSilentPatterns(arg0 moira.SilentPatternType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockSilentPatterns", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockSilentPatterns indicates an expected call of UnlockSilentPatterns
func (mr *MockDatabaseMockRecorder) UnlockSilentPatterns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockSilentPatterns", reflect.TypeOf((*MockDatabase)(nil).UnlockSilentPatterns), arg0)
}

// UpdateInheritanceDataVersion mocks base method
func (m *MockDatabase) UpdateInheritanceDataVersion() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInheritanceDataVersion")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInheritanceDataVersion indicates an expected call of UpdateInheritanceDataVersion
func (mr *MockDatabaseMockRecorder) UpdateInheritanceDataVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInheritanceDataVersion", reflect.TypeOf((*MockDatabase)(nil).UpdateInheritanceDataVersion))
}

// UpdateMetricsHeartbeat mocks base method
func (m *MockDatabase) UpdateMetricsHeartbeat() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricsHeartbeat")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetricsHeartbeat indicates an expected call of UpdateMetricsHeartbeat
func (mr *MockDatabaseMockRecorder) UpdateMetricsHeartbeat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricsHeartbeat", reflect.TypeOf((*MockDatabase)(nil).UpdateMetricsHeartbeat))
}

// UpdateServiceDuty mocks base method
func (m *MockDatabase) UpdateServiceDuty(arg0 string, arg1 moira.DutyData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceDuty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceDuty indicates an expected call of UpdateServiceDuty
func (mr *MockDatabaseMockRecorder) UpdateServiceDuty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceDuty", reflect.TypeOf((*MockDatabase)(nil).UpdateServiceDuty), arg0, arg1)
}

// UpdateSlackDashboard mocks base method
func (m *MockDatabase) UpdateSlackDashboard(arg0, arg1 string, arg2 moira.SlackDashboard, arg3 *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlackDashboard", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSlackDashboard indicates an expected call of UpdateSlackDashboard
func (mr *MockDatabaseMockRecorder) UpdateSlackDashboard(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlackDashboard", reflect.TypeOf((*MockDatabase)(nil).UpdateSlackDashboard), arg0, arg1, arg2, arg3)
}
