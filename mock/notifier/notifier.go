// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira/notifier (interfaces: Notifier)

package mock_notifier

import (
	gomock "github.com/golang/mock/gomock"
	moira_alert "go.avito.ru/DO/moira"
	notifier "go.avito.ru/DO/moira/notifier"
	sync "sync"
)

// MockNotifier is a mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return _m.recorder
}

// GetSenders mocks base method
func (_m *MockNotifier) GetSenders() map[string]bool {
	ret := _m.ctrl.Call(_m, "GetSenders")
	ret0, _ := ret[0].(map[string]bool)
	return ret0
}

// GetSenders indicates an expected call of GetSenders
func (_mr *MockNotifierMockRecorder) GetSenders() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSenders")
}

// RegisterSender mocks base method
func (_m *MockNotifier) RegisterSender(_param0 map[string]string, _param1 moira_alert.Sender) error {
	ret := _m.ctrl.Call(_m, "RegisterSender", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSender indicates an expected call of RegisterSender
func (_mr *MockNotifierMockRecorder) RegisterSender(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterSender", arg0, arg1)
}

// Send mocks base method
func (_m *MockNotifier) Send(_param0 *notifier.NotificationPackage, _param1 *sync.WaitGroup) {
	_m.ctrl.Call(_m, "Send", _param0, _param1)
}

// Send indicates an expected call of Send
func (_mr *MockNotifierMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Send", arg0, arg1)
}

// StopSenders mocks base method
func (_m *MockNotifier) StopSenders() {
	_m.ctrl.Call(_m, "StopSenders")
}

// StopSenders indicates an expected call of StopSenders
func (_mr *MockNotifierMockRecorder) StopSenders() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopSenders")
}
